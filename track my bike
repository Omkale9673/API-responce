import 'package:flutter/material.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:google_maps_flutter/google_maps_flutter.dart';

class FindMyVehicle extends StatefulWidget {
  final String sessionId;
  final String vehicleId;

  FindMyVehicle({required this.sessionId, required this.vehicleId, Map<String, dynamic>? dashboardData});

  @override
  _FindMyVehicleState createState() => _FindMyVehicleState();
}

class _FindMyVehicleState extends State<FindMyVehicle> {
  Map<String, dynamic>? vehicleLocation;
  bool isLoading = true;
  final String googleApiKey = 'AIzaSyBVn1idxtxfsovEZx8uUVc4NEp1pn9_FEE'; // Replace with your actual API key

  @override
  void initState() {
    super.initState();
    fetchVehicleLocation();
  }

  Future<void> fetchVehicleLocation() async {
    final response = await http.get(
      Uri.parse(
          'http://34.93.202.185:5000/api/v1/vehicle/find_my_vehicle?vehicle_id=${widget.vehicleId}&session=${widget.sessionId}'),
    );
    if (response.statusCode == 200) {
      final data = json.decode(response.body);
      setState(() {
        vehicleLocation = {
          'latitude': double.parse(data['data']['latitude'].toString()),
          'longitude': double.parse(data['data']['longitude'].toString()),
        };
        isLoading = false;
      });
    } else {
      setState(() {
        isLoading = false;
      });
      print('Failed to load location');
    }
  }

  Widget _buildDialogOption(String imagePath, String label, VoidCallback onTap, double width) {
    return GestureDetector(
      onTap: onTap,
      child: Column(
        children: [
          Image.asset(
            imagePath,
            width: width * 0.2,
          ),
          const SizedBox(height: 10),
          Text(
            label,
            style: const TextStyle(color: Colors.black),
          ),
        ],
      ),
    );
  }

  void _showDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return Theme(
          data: Theme.of(context).copyWith(
            dialogBackgroundColor: Colors.white,
          ),
          child: AlertDialog(
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Padding(
                  padding: const EdgeInsets.only(top: 20.0),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: [
                      _buildDialogOption(
                        'assets/images/horn.png',
                        'Horn',
                        () {},
                        MediaQuery.of(context).size.width,
                      ),
                      _buildDialogOption(
                        'assets/images/light.png',
                        'Turn ON lights',
                        () {},
                        MediaQuery.of(context).size.width,
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 20),
                Center(
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      const SizedBox(height: 10),
                      TextButton(
                        onPressed: () {
                          Navigator.of(context).pop();
                        },
                        style: TextButton.styleFrom(
                          padding: EdgeInsets.zero,
                        ),
                        child: Container(
                          width: 100,
                          height: 50,
                          decoration: BoxDecoration(
                            border: Border.all(
                              color: const Color.fromARGB(255, 9, 84, 94),
                              width: 2.0,
                            ),
                            borderRadius: BorderRadius.circular(35),
                          ),
                          alignment: Alignment.center,
                          child: const Text(
                            "Cancel",
                            style: TextStyle(
                              color: Color.fromARGB(255, 9, 84, 94),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Vehicle Location'),
        actions: [
          IconButton(
            icon: Icon(Icons.more_vert),
            onPressed: () {
              _showDialog(context);
            },
          ),
        ],
      ),
      body: isLoading
          ? Center(child: CircularProgressIndicator())
          : vehicleLocation != null
              ? VehicleMap(
                  latitude: vehicleLocation!['latitude'],
                  longitude: vehicleLocation!['longitude'],
                )
              : Center(child: Text('Location not found')),
    );
  }
}

class VehicleMap extends StatelessWidget {
  final double latitude;
  final double longitude;

  VehicleMap({required this.latitude, required this.longitude});

  @override
  Widget build(BuildContext context) {
    final LatLng vehicleLocation = LatLng( longitude,latitude);

    return GoogleMap(
      initialCameraPosition: CameraPosition(
        target: vehicleLocation,
        zoom: 14.0,
      ),
      markers: {
        Marker(
          markerId: MarkerId('vehicleLocation'),
          position: vehicleLocation,
        ),
      },
      onMapCreated: (GoogleMapController controller) {
        // You can set the map controller here if needed
      },
    );
  }
}
